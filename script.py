# script_fixed.py
import asyncio
import io
import json
import logging
import os
import tempfile
from datetime import datetime, timezone
from typing import Dict, Optional, Set, List, Any

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.exceptions import TelegramBadRequest, TelegramAPIError

# ----------------- –õ–æ–≥–∏ -----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s:%(name)s: %(message)s")
logger = logging.getLogger(__name__)

# ----------------- –ö–æ–Ω—Ñ–∏–≥ -----------------
TOKEN = ("8263730440:AAGz5I3gBjAD2FwrhIcrL5ZIZ-nkzShXfak")


# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –∞–¥–º–∏–Ω ID
ADMINS: Set[int] = {6958734279, 1865077709}

TOTAL_SECONDS = 86400                # 24 —á–∞—Å–∞ ‚Äî –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
SHORT_ANIMATION_SECONDS = 10         # 10 —Å–µ–∫—É–Ω–¥ ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
LONG_WORKER_INTERVAL = 60            # —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è long worker (—Å–µ–∫)
PERSIST_FILE = "requests_db.json"
TELEGRAM_MSG_LIMIT = 4000

# ----------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è -----------------
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

requests_db: Dict[int, Dict[str, Any]] = {}
_next_request_id: int = 1

requests_lock = asyncio.Lock()
_next_id_lock = asyncio.Lock()
file_lock = asyncio.Lock()

tasks_by_request: Dict[int, Dict[str, Optional[asyncio.Task]]] = {}
blocked_users: Dict[int, str] = {}

# FSM
class AdminManage(StatesGroup):
    waiting_block_reason = State()

class SendMessage(StatesGroup):
    waiting_for_text = State()


# ----------------- UI -----------------
def keyboard_button(text: str) -> KeyboardButton:
    return KeyboardButton(text=text)

def main_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    kb: List[List[KeyboardButton]] = [
        [keyboard_button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")],
        [keyboard_button("üìñ –¢—É—Ç–æ—Ä–∏–∞–ª")],
        [keyboard_button("üìä –°—Ç–∞—Ç—É—Å")]
    ]
    if is_admin:
        kb.append([keyboard_button("üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def admin_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[
        [keyboard_button("üë• –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤")],
        [keyboard_button("üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
        [keyboard_button("‚¨Ö –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def generate_progress_bar(percent: int, blocks: int = 5) -> str:
    percent = max(0, min(100, percent))
    filled = int((percent * blocks) / 100)
    filled = min(blocks, max(0, filled))
    return "‚úÖ" * filled + "‚¨ú" * (blocks - filled) + f" {percent}%"

def format_dt(dt: datetime) -> str:
    return dt.strftime("%Y-%m-%d %H:%M UTC")


# ----------------- Persistence -----------------
async def save_requests_db() -> None:
    async with file_lock:
        try:
            safe: Dict[str, Dict[str, Any]] = {}
            async with requests_lock:
                for rid, r in requests_db.items():
                    copy = r.copy()
                    ca = copy.get("created_at")
                    if isinstance(ca, datetime):
                        copy["created_at"] = ca.isoformat()
                    safe[str(rid)] = copy
            tmp_path = PERSIST_FILE + ".tmp"
            with open(tmp_path, "w", encoding="utf-8") as f:
                json.dump(safe, f, ensure_ascii=False, indent=2)
            os.replace(tmp_path, PERSIST_FILE)
            logger.debug("requests_db saved")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ requests_db")

async def load_requests_db() -> None:
    global _next_request_id
    if not os.path.exists(PERSIST_FILE):
        return
    async with file_lock:
        try:
            with open(PERSIST_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            for k, v in data.items():
                rid = int(k)
                ca = v.get("created_at")
                if isinstance(ca, str):
                    try:
                        v["created_at"] = datetime.fromisoformat(ca)
                    except Exception:
                        v["created_at"] = datetime.now(timezone.utc)
                requests_db[rid] = v
            if requests_db:
                _next_request_id = max(requests_db.keys()) + 1
            logger.info("requests_db loaded, items=%d", len(requests_db))
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ requests_db")


# ----------------- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã -----------------
def truncate_text_for_telegram(text: str, limit: int = TELEGRAM_MSG_LIMIT):
    if not text:
        return "", False
    if len(text) <= limit:
        return text, False
    safe_cut = max(0, limit - 200)
    preview = text[:safe_cut].rstrip()
    preview += "\n\n[...–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é¬ª]"
    return preview, True

async def send_full_text_as_file(chat_id: int, filename: str, content: str):
    """
    –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å BytesIO; fallback -> –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
    """
    bio = io.BytesIO()
    bio.write(content.encode("utf-8"))
    bio.seek(0)

    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å BytesIO (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –≤–µ—Ä—Å–∏–π aiogram)
    try:
        await bot.send_document(chat_id=chat_id, document=bio, filename=filename)
        return
    except TypeError as e:
        logger.info("send_document(BytesIO) –≤—ã–∑–≤–∞–ª TypeError, fallback to temp file: %s", e)
    except TelegramAPIError:
        logger.exception("Telegram API error –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BytesIO, fallback to temp file.")
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å BytesIO (–ø–æ–ø—ã—Ç–∫–∞ fallback): %s", e)

    # Fallback: –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    tmp_path = None
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".txt") as tf:
            tf.write(content.encode("utf-8"))
            tmp_path = tf.name
        await bot.send_document(chat_id=chat_id, document=tmp_path)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –ø—É—Ç–∏.")
    finally:
        if tmp_path and os.path.exists(tmp_path):
            try:
                os.remove(tmp_path)
            except Exception:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª %s", tmp_path)


# ----------------- Safe update message -----------------
async def safe_update_progress_message(rid: int, text: str) -> None:
    async with requests_lock:
        req = requests_db.get(rid)
        if not req:
            return
        chat_id = req["chat_id"]
        msg_id = req.get("progress_message_id")

    # –î–ª—è safety: –æ–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—ã—á–Ω–æ –Ω–µ–±–æ–ª—å—à–æ–π ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    safe_text, _ = truncate_text_for_telegram(text, limit=TELEGRAM_MSG_LIMIT)

    if msg_id is None:
        try:
            sent = await bot.send_message(chat_id, safe_text)
            async with requests_lock:
                if rid in requests_db:
                    requests_db[rid]["progress_message_id"] = sent.message_id
            await save_requests_db()
            return
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

    try:
        await bot.edit_message_text(text=safe_text, chat_id=chat_id, message_id=msg_id)
    except TelegramBadRequest as e:
        logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è #%s: %s ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ", rid, e)
        try:
            sent = await bot.send_message(chat_id, safe_text)
            async with requests_lock:
                if rid in requests_db:
                    requests_db[rid]["progress_message_id"] = sent.message_id
            await save_requests_db()
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    except TelegramAPIError:
        logger.exception("Telegram API error –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è #%s", rid)
    except Exception:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ safe_update_progress_message –¥–ª—è #%s", rid)


async def update_progress_message(rid: int) -> None:
    async with requests_lock:
        req = requests_db.get(rid)
        if not req:
            return
        percent = int(req.get("progress", 0))
        status = req.get("status", "processing")
    status_text = {
        "processing": "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "done": "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        "failed": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å"
    }.get(status, status)
    text = (
        f"{status_text} ‚Äî –ó–∞–ø—Ä–æ—Å #{rid}\n"
        f"{generate_progress_bar(percent)}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {format_dt(req['created_at'])}\n"
    )
    await safe_update_progress_message(rid, text)


# ----------------- Mark done / failed -----------------
async def mark_request_done(rid: int, by_admin: bool = False) -> None:
    async with requests_lock:
        r = requests_db.get(rid)
        if not r:
            return
        if r.get("status") == "done":
            return
        r["status"] = "done"
        r["progress"] = 100
    entry = tasks_by_request.pop(rid, {})
    for t in entry.values():
        if t and not t.done():
            t.cancel()
    await update_progress_message(rid)
    try:
        async with requests_lock:
            chat_id = requests_db[rid]["chat_id"]
        await bot.send_message(chat_id, f"‚úÖ –ó–∞–ø—Ä–æ—Å #{rid} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è #%s", rid)
    await save_requests_db()

async def mark_request_failed(rid: int, reason: Optional[str] = None) -> None:
    async with requests_lock:
        r = requests_db.get(rid)
        if not r:
            return
        if r.get("status") == "failed":
            return
        r["status"] = "failed"
        r["progress"] = 100
    entry = tasks_by_request.pop(rid, {})
    for t in entry.values():
        if t and not t.done():
            t.cancel()
    await update_progress_message(rid)
    try:
        async with requests_lock:
            chat_id = requests_db[rid]["chat_id"]
        reason_text = f" –ü—Ä–∏—á–∏–Ω–∞: {reason}" if reason else ""
        await bot.send_message(chat_id, f"‚ùå –ó–∞–ø—Ä–æ—Å #{rid} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.{reason_text}")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–∞–ª–µ –¥–ª—è #%s", rid)
    await save_requests_db()


# ----------------- Handlers -----------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    is_admin = (message.from_user and message.from_user.id in ADMINS)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–∫—Ä–∞—Å–µ–Ω.", reply_markup=main_keyboard(is_admin))

@dp.message(F.text == "üìñ –¢—É—Ç–æ—Ä–∏–∞–ª")
async def cmd_tutorial(message: types.Message):
    is_admin = (message.from_user and message.from_user.id in ADMINS)
    await message.answer(
        "üìú –¢—É—Ç–æ—Ä–∏–∞–ª:\n"
        "1) –ù–∞–∂–º–∏ ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª\n"
        "2) –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:\n"
        "`_|WARNING:-DO-NOT-SHARE-THIS`\n\n"
        "–¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ—Ç –º–∞—Ä–∫–µ—Ä –µ—Å—Ç—å ‚Äî –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=main_keyboard(is_admin)
    )

@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def cmd_send_start(message: types.Message, state: FSMContext):
    uid = message.from_user.id if message.from_user else None
    if uid in blocked_users:
        reason = blocked_users.get(uid, "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        await message.answer(f"‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=main_keyboard(uid in ADMINS if uid else False))
        return
    await state.set_state(SendMessage.waiting_for_text)
    await message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä: `_|WARNING:-DO-NOT-SHARE-THIS`)",
                         parse_mode=ParseMode.MARKDOWN, reply_markup=main_keyboard(uid in ADMINS if uid else False))

@dp.message(SendMessage.waiting_for_text, F.text)
async def process_text(message: types.Message, state: FSMContext):
    text = message.text.strip() if message.text else ""
    uid = message.from_user.id if message.from_user else None
    is_admin = (uid in ADMINS)

    if uid in blocked_users:
        await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã.", reply_markup=main_keyboard(is_admin))
        await state.clear()
        return

    if "_|WARNING:-DO-NOT-SHARE-THIS" not in text:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞!", reply_markup=main_keyboard(is_admin))
        await state.clear()
        return

    async with _next_id_lock:
        global _next_request_id
        rid = _next_request_id
        _next_request_id += 1

    created_at = datetime.now(timezone.utc)
    async with requests_lock:
        requests_db[rid] = {
            "user_id": uid,
            "username": (message.from_user.username or message.from_user.full_name) if message.from_user else "unknown",
            "full_text": text,
            "created_at": created_at,
            "status": "processing",
            "progress": 0,
            "chat_id": message.chat.id,
            "progress_message_id": None
        }

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        sent = await message.answer(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ #{rid}\n{generate_progress_bar(0)}", reply_markup=main_keyboard(is_admin))
        progress_msg_id = sent.message_id
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
        progress_msg_id = None

    async with requests_lock:
        if rid in requests_db:
            requests_db[rid]["progress_message_id"] = progress_msg_id
    await save_requests_db()

    short_task = asyncio.create_task(_short_animation_then_mark_done(rid))
    long_task = asyncio.create_task(_long_progress_worker(rid))
    tasks_by_request[rid] = {"short": short_task, "long": long_task}

    await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç (#{rid}). –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.", reply_markup=main_keyboard(is_admin))
    await state.clear()

@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def cmd_status(message: types.Message):
    uid = message.from_user.id if message.from_user else None
    async with requests_lock:
        user_requests = [(rid, r.copy()) for rid, r in requests_db.items() if r.get("user_id") == uid]

    if not user_requests:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.", reply_markup=main_keyboard(uid in ADMINS if uid else False))
        return

    out_lines = []
    now = datetime.now(timezone.utc)
    for rid, r in sorted(user_requests, key=lambda x: x[1]["created_at"], reverse=True):
        created = r["created_at"]
        elapsed = (now - created).total_seconds()
        percent_24 = min(100, max(0, int((elapsed / TOTAL_SECONDS) * 100)))
        bar_24 = generate_progress_bar(percent_24)
        local_percent = int(r.get("progress", 0))
        bar_local = generate_progress_bar(local_percent)
        status_text = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if r["status"] == "done" else ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å" if r["status"] == "failed" else "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        out_lines.append(
            f"üÜî #{rid} ‚Äî {status_text}\n"
            f"‚è± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {format_dt(created)}\n"
            f"üìà –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {bar_local}\n"
            f"üïí –ü—Ä–æ–≥—Ä–µ—Å—Å (24—á): {bar_24}\n"
        )
    await message.answer("\n".join(out_lines), reply_markup=main_keyboard(uid in ADMINS if uid else False))

@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message):
    await message.answer("‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard((message.from_user.id in ADMINS) if message.from_user else False))


# ----------------- Admin UI / user management -----------------
@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
@dp.message(Command("admin"))
async def cmd_admin_panel(message: types.Message):
    if not (message.from_user and message.from_user.id in ADMINS):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard())

@dp.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤")
async def cmd_admin_list(message: types.Message):
    if not (message.from_user and message.from_user.id in ADMINS):
        return
    async with requests_lock:
        items = sorted(requests_db.items())
    if not items:
        await message.answer("üì≠ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.", reply_markup=admin_keyboard())
        return
    for rid, r in items:
        text = (
            f"üÜî #{rid}\n"
            f"üë§ @{r['username']} (ID: {r['user_id']})\n"
            f"‚è± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {format_dt(r['created_at'])}\n"
            f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {r.get('progress',0)}%\n"
            f"–°—Ç–∞—Ç—É—Å: {r.get('status')}\n"
        )
        ikb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª—è—Ç—å", callback_data=f"request:{rid}:manage")]
        ])
        try:
            await message.answer(text, reply_markup=ikb)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–æ–∫ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤.")
    await message.answer("–ì–æ—Ç–æ–≤–æ.", reply_markup=admin_keyboard())

@dp.message(F.text == "üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def cmd_admin_users(message: types.Message):
    if not (message.from_user and message.from_user.id in ADMINS):
        return
    users = {}
    async with requests_lock:
        for r in requests_db.values():
            uid = r.get("user_id")
            if uid:
                users[uid] = r.get("username", "unknown")
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏.", reply_markup=admin_keyboard())
        return
    rows = []
    for uid, uname in users.items():
        label = f"{uname} ({uid})"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"user_manage:{uid}:view")])
    rows.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="user_manage:0:close")])
    ikb = InlineKeyboardMarkup(inline_keyboard=rows)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=ikb)


@dp.callback_query(F.data.startswith("user_manage:"))
async def cb_user_manage(cq: types.CallbackQuery, state: FSMContext):
    data = cq.data
    parts = data.split(":")
    if len(parts) != 3:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    _, uid_s, action = parts
    try:
        uid = int(uid_s)
    except ValueError:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.", show_alert=True)
        return

    if action == "close":
        try:
            await cq.message.delete_reply_markup()
        except Exception:
            pass
        await cq.answer()
        return

    if action == "view":
        async with requests_lock:
            user_requests = [(rid, r) for rid, r in requests_db.items() if r.get("user_id") == uid]
        if not user_requests:
            text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ requests."
        else:
            uname = user_requests[0][1].get("username", "unknown")
            count = len(user_requests)
            last = max(r["created_at"] for _, r in user_requests)
            blocked = "–î–∞" if uid in blocked_users else "–ù–µ—Ç"
            text = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uname} (ID: {uid})\n"
                f"–ó–∞—è–≤–æ–∫: {count}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞: {format_dt(last)}\n"
                f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {blocked}\n"
            )
        rows = [
            [InlineKeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", callback_data=f"user_manage:{uid}:block")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–∏—á–∏–Ω–æ–π", callback_data=f"user_manage:{uid}:block_custom")],
            [InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_manage:{uid}:unblock")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫–∏", callback_data=f"user_manage:{uid}:delete")],
            [InlineKeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="user_manage:0:close")]
        ]
        ikb = InlineKeyboardMarkup(inline_keyboard=rows)
        try:
            await cq.message.edit_text(text, reply_markup=ikb)
        except Exception:
            await cq.message.answer(text, reply_markup=ikb)
        await cq.answer()
        return

    if action == "block":
        blocked_users[uid] = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        try:
            await cq.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã).", reply_markup=None)
        except Exception:
            pass
        await cq.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return

    if action == "block_custom":
        await state.update_data(target_block_uid=uid)
        try:
            await state.set_state(AdminManage.waiting_block_reason)
        except Exception:
            await state.set_state(AdminManage.waiting_block_reason.state)
        try:
            await cq.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):", reply_markup=None)
        except Exception:
            pass
        await cq.answer()
        return

    if action == "unblock":
        if uid in blocked_users:
            blocked_users.pop(uid, None)
            try:
                await cq.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=None)
            except Exception:
                pass
            await cq.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await cq.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –≤ –±–ª–æ–∫-–ª–∏—Å—Ç–µ.", show_alert=True)
        return

    if action == "delete":
        async with requests_lock:
            to_delete = [rid for rid, r in list(requests_db.items()) if r.get("user_id") == uid]
        deleted = 0
        for rid in to_delete:
            async with requests_lock:
                target = requests_db.pop(rid, None)
            if target:
                try:
                    await bot.delete_message(chat_id=target["chat_id"], message_id=target.get("progress_message_id"))
                except Exception:
                    pass
                deleted += 1
            entry = tasks_by_request.pop(rid, {})
            for t in entry.values():
                if t and not t.done():
                    t.cancel()
        await save_requests_db()
        try:
            await cq.message.edit_text(f"–£–¥–∞–ª–µ–Ω–æ {deleted} –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}.", reply_markup=None)
        except Exception:
            pass
        await cq.answer("–ó–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
        return

@dp.message(AdminManage.waiting_block_reason, F.text)
async def admin_provide_block_reason(message: types.Message, state: FSMContext):
    if not (message.from_user and message.from_user.id in ADMINS):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        await state.clear()
        return
    data = await state.get_data()
    target_uid = data.get("target_block_uid")
    reason = message.text.strip()
    if not target_uid:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        await state.clear()
        return
    blocked_users[int(target_uid)] = reason
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}", reply_markup=admin_keyboard())
    await state.clear()


# ----------------- callback: request management + show_full -----------------
@dp.callback_query(F.data.startswith("request:"))
async def cb_request_manage(cq: types.CallbackQuery):
    data = cq.data
    parts = data.split(":")
    if len(parts) < 3:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    _, rid_s, action = parts[0], parts[1], parts[2]
    try:
        rid = int(rid_s)
    except ValueError:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.", show_alert=True)
        return

    if not (cq.from_user and cq.from_user.id in ADMINS):
        await cq.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", show_alert=True)
        return

    # –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ñ–∞–π–ª
    if action == "show_full":
        async with requests_lock:
            r = requests_db.get(rid)
            if not r:
                await cq.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            full_text = r.get("full_text", "")
        filename = f"request_{rid}.txt"
        await send_full_text_as_file(cq.from_user.id, filename, full_text)
        await cq.answer("–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ.")
        return

    if action == "manage":
        async with requests_lock:
            r = requests_db.get(rid)
        if not r:
            await cq.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        full_text = r.get("full_text", "")
        preview, is_truncated = truncate_text_for_telegram(full_text)
        text = (
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–æ–π #{rid}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{r.get('username')} (ID {r.get('user_id')})\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {format_dt(r['created_at'])}\n"
            f"–°—Ç–∞—Ç—É—Å: {r.get('status')} ({r.get('progress',0)}%)\n"
            f"–¢–µ–∫—Å—Ç (–ø—Ä–µ–≤—å—é):\n{preview}\n"
        )

        ikb_rows = []
        if is_truncated:
            ikb_rows.append([InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"request:{rid}:show_full")])
        ikb_rows.extend([
            [InlineKeyboardButton(text="‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≥–æ—Ç–æ–≤–æ", callback_data=f"request:{rid}:done")],
            [InlineKeyboardButton(text="‚ùå –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ—É–¥–∞—á–∞", callback_data=f"request:{rid}:fail")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"request:{rid}:delete")],
            [InlineKeyboardButton(text="‚Ü© –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"request:{rid}:close")]
        ])
        ikb = InlineKeyboardMarkup(inline_keyboard=ikb_rows)

        try:
            await cq.message.edit_text(text, reply_markup=ikb)
        except TelegramBadRequest as e:
            logger.info("edit_text failed in cb_request_manage: %s", e)
            try:
                await cq.message.answer(text, reply_markup=ikb)
            except TelegramBadRequest as e2:
                logger.info("answer also failed in cb_request_manage: %s", e2)
                safe_preview, _ = truncate_text_for_telegram(full_text, limit=2000)
                safe_text = (
                    f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–æ–π #{rid}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{r.get('username')} (ID {r.get('user_id')})\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {format_dt(r['created_at'])}\n"
                    f"–¢–µ–∫—Å—Ç (—Å–∏–ª—å–Ω–æ —É—Ä–µ–∑–∞–Ω):\n{safe_preview}\n"
                )
                safe_ikb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"request:{rid}:show_full")],
                    [InlineKeyboardButton(text="‚Ü© –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"request:{rid}:close")]
                ])
                try:
                    await cq.message.answer(safe_text, reply_markup=safe_ikb)
                except Exception:
                    logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Å–∏–ª—å–Ω–æ —É—Ä–µ–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–≤—å—é –≤ cb_request_manage.")
        await cq.answer()
        return

    if action == "close":
        try:
            await cq.message.delete_reply_markup()
        except Exception:
            pass
        await cq.answer()
        return

    if action == "done":
        await mark_request_done(rid, by_admin=True)
        await cq.answer("–ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–∞—è.")
        try:
            await cq.message.edit_text(f"–ó–∞—è–≤–∫–∞ #{rid} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–∞—è.", reply_markup=None)
        except Exception:
            pass
        return

    if action == "fail":
        await mark_request_failed(rid)
        await cq.answer("–ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ—É–¥–∞—á–∞.")
        try:
            await cq.message.edit_text(f"–ó–∞—è–≤–∫–∞ #{rid} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ—É–¥–∞—á–∞.", reply_markup=None)
        except Exception:
            pass
        return

    if action == "delete":
        async with requests_lock:
            target = requests_db.pop(rid, None)
        if target:
            try:
                await bot.delete_message(chat_id=target["chat_id"], message_id=target.get("progress_message_id"))
            except Exception:
                pass
            entry = tasks_by_request.pop(rid, {})
            for t in entry.values():
                if t and not t.done():
                    t.cancel()
            await save_requests_db()
            await cq.answer("–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
            try:
                await cq.message.edit_text(f"–ó–∞—è–≤–∫–∞ #{rid} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
            except Exception:
                pass
        else:
            await cq.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return


# ----------------- Short animation (10s) -----------------
async def _short_animation_then_mark_done(rid: int):
    async with requests_lock:
        req = requests_db.get(rid)
    if not req:
        return
    start = datetime.now(timezone.utc)
    interval = 0.5
    try:
        while True:
            elapsed = (datetime.now(timezone.utc) - start).total_seconds()
            percent = min(100, int((elapsed / SHORT_ANIMATION_SECONDS) * 100))
            async with requests_lock:
                if rid in requests_db:
                    requests_db[rid]["progress"] = percent
            text = f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ #{rid}\n{generate_progress_bar(percent)}"
            await safe_update_progress_message(rid, text)
            if elapsed >= SHORT_ANIMATION_SECONDS:
                break
            await asyncio.sleep(interval)
        await mark_request_done(rid)
    except asyncio.CancelledError:
        logger.info("Short animation cancelled for #%s", rid)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ short animation –¥–ª—è #%s", rid)


# ----------------- Long worker (24h progress) -----------------
async def _long_progress_worker(rid: int):
    async with requests_lock:
        req = requests_db.get(rid)
    if not req:
        return
    created = req["created_at"]
    try:
        while True:
            await asyncio.sleep(LONG_WORKER_INTERVAL)
            async with requests_lock:
                r = requests_db.get(rid)
                if not r:
                    break
                if r.get("status") != "processing":
                    await update_progress_message(rid)
                    break
                elapsed = (datetime.now(timezone.utc) - created).total_seconds()
                long_percent = min(100, int((elapsed / TOTAL_SECONDS) * 100))
                r["progress"] = max(r.get("progress", 0), long_percent)
            await update_progress_message(rid)
    except asyncio.CancelledError:
        logger.info("Long worker cancelled for #%s", rid)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ long worker –¥–ª—è #%s", rid)
    finally:
        tasks_by_request.pop(rid, None)


# ----------------- Admin commands -----------------
@dp.message(Command("complete"))
async def cmd_complete(message: types.Message):
    if not (message.from_user and message.from_user.id in ADMINS):
        return
    args = (message.get_args() or "").strip()
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /complete <request_id>")
        return
    try:
        rid = int(args)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        return
    await mark_request_done(rid)
    await message.answer(f"–ó–∞—è–≤–∫–∞ #{rid} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–∞—è.")

@dp.message(Command("fail"))
async def cmd_mark_fail(message: types.Message):
    if not (message.from_user and message.from_user.id in ADMINS):
        return
    args = (message.get_args() or "").strip()
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fail <request_id>")
        return
    try:
        rid = int(args)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        return
    await mark_request_failed(rid)
    await message.answer(f"–ó–∞—è–≤–∫–∞ #{rid} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–∞—è.")


# ----------------- Restore tasks after startup -----------------
async def restore_workers_after_startup():
    async with requests_lock:
        pending = [rid for rid, r in requests_db.items() if r.get("status") == "processing"]
    for rid in pending:
        short_task = asyncio.create_task(_short_animation_then_mark_done(rid))
        long_task = asyncio.create_task(_long_progress_worker(rid))
        tasks_by_request[rid] = {"short": short_task, "long": long_task}
    if pending:
        logger.info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ %d pending –∑–∞—è–≤–æ–∫ (–∑–∞–ø—É—â–µ–Ω—ã –≤–æ—Ä–∫–µ—Ä—ã).", len(pending))

async def on_startup():
    await load_requests_db()
    await restore_workers_after_startup()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤.")

async def on_shutdown():
    for entry in list(tasks_by_request.values()):
        for t in entry.values():
            if t and not t.done():
                t.cancel()
    try:
        await bot.session.close()
    except Exception:
        pass
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.")


# ----------------- –ó–∞–ø—É—Å–∫ -----------------
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
